# Generated by Django 5.1.3 on 2024-11-23 15:56

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', models.CharField(help_text='Item category name', max_length=100, unique=True, verbose_name='Category')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Category',
                'verbose_name_plural': 'Categories',
                'ordering': ['category'],
            },
        ),
        migrations.CreateModel(
            name='Department',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the department', max_length=100, unique=True, verbose_name='Department Name')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Department',
                'verbose_name_plural': 'Departments',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Account',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(choices=[('admin', 'Admin'), ('staff', 'Staff')], default='staff', help_text='Account role determines permissions', max_length=50, verbose_name='Role')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this account should be treated as active', verbose_name='Active')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(help_text='Associated user account', on_delete=django.db.models.deletion.CASCADE, related_name='account', to=settings.AUTH_USER_MODEL, verbose_name='User')),
                ('department', models.ForeignKey(blank=True, help_text='Department this account belongs to', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='accounts', to='StockApp.department', verbose_name='Department')),
            ],
            options={
                'verbose_name': 'Account',
                'verbose_name_plural': 'Accounts',
                'ordering': ['user__username'],
            },
        ),
        migrations.CreateModel(
            name='Complaint',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Brief title of the complaint', max_length=200, verbose_name='Title')),
                ('description', models.TextField(help_text='Detailed description of the complaint', verbose_name='Description')),
                ('priority', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('urgent', 'Urgent')], default='medium', help_text='Priority level of the complaint', max_length=20, verbose_name='Priority')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('in_progress', 'In Progress'), ('resolved', 'Resolved'), ('closed', 'Closed')], default='pending', help_text='Current status of the complaint', max_length=20, verbose_name='Status')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('resolution_date', models.DateTimeField(blank=True, help_text='Date when the complaint was resolved', null=True, verbose_name='Resolution Date')),
                ('resolution_notes', models.TextField(blank=True, help_text='Notes about how the complaint was resolved', null=True, verbose_name='Resolution Notes')),
                ('assigned_to', models.ForeignKey(blank=True, help_text='Admin assigned to handle this complaint', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_complaints', to='StockApp.account', verbose_name='Assigned To')),
                ('submitted_by', models.ForeignKey(help_text='Staff member who submitted the complaint', on_delete=django.db.models.deletion.CASCADE, related_name='complaints', to='StockApp.account', verbose_name='Submitted By')),
                ('department', models.ForeignKey(help_text='Department related to the complaint', on_delete=django.db.models.deletion.CASCADE, related_name='department_complaints', to='StockApp.department', verbose_name='Department')),
            ],
            options={
                'verbose_name': 'Complaint',
                'verbose_name_plural': 'Complaints',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ComplaintComment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('comment', models.TextField(verbose_name='Comment')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='complaint_comments', to='StockApp.account', verbose_name='Author')),
                ('complaint', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='StockApp.complaint', verbose_name='Complaint')),
            ],
            options={
                'verbose_name': 'Complaint Comment',
                'verbose_name_plural': 'Complaint Comments',
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='AvailableStock',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('item_id', models.CharField(help_text='Unique identifier for the item', max_length=50, unique=True, verbose_name='Item ID')),
                ('item_name', models.CharField(help_text='Name of the item', max_length=100, verbose_name='Item Name')),
                ('serial_no', models.CharField(help_text='Unique serial number of the item', max_length=100, unique=True, verbose_name='Serial Number')),
                ('status', models.CharField(choices=[('available', 'Available'), ('maintenance', 'Under Maintenance'), ('retired', 'Retired'), ('inuse', 'In Use')], default='available', help_text='Current status of the item', max_length=100, verbose_name='Status')),
                ('location', models.CharField(help_text='Physical location of the item', max_length=200, verbose_name='Location')),
                ('assigned_to', models.CharField(blank=True, help_text='Person to whom the item is assigned', max_length=100, null=True, verbose_name='Assigned To')),
                ('date', models.DateField(auto_now_add=True, help_text='Date when the item was added to inventory', verbose_name='Date Added')),
                ('description', models.TextField(blank=True, help_text='Additional details about the item', max_length=500, verbose_name='Description')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('category', models.ForeignKey(help_text='Item category', on_delete=django.db.models.deletion.CASCADE, to='StockApp.category', verbose_name='Category')),
                ('department', models.ForeignKey(help_text='Department owning this item', on_delete=django.db.models.deletion.CASCADE, related_name='stocks', to='StockApp.department', verbose_name='Department')),
            ],
            options={
                'verbose_name': 'Available Stock',
                'verbose_name_plural': 'Available Stocks',
                'ordering': ['-date'],
            },
        ),
        migrations.AddIndex(
            model_name='complaint',
            index=models.Index(fields=['status', 'priority'], name='StockApp_co_status_6f9216_idx'),
        ),
        migrations.AddIndex(
            model_name='complaint',
            index=models.Index(fields=['submitted_by'], name='StockApp_co_submitt_834440_idx'),
        ),
        migrations.AddIndex(
            model_name='complaint',
            index=models.Index(fields=['department'], name='StockApp_co_departm_8846d3_idx'),
        ),
        migrations.AddIndex(
            model_name='availablestock',
            index=models.Index(fields=['status', 'department'], name='StockApp_av_status_1cea31_idx'),
        ),
        migrations.AddIndex(
            model_name='availablestock',
            index=models.Index(fields=['item_id'], name='StockApp_av_item_id_884353_idx'),
        ),
        migrations.AddIndex(
            model_name='availablestock',
            index=models.Index(fields=['serial_no'], name='StockApp_av_serial__4d1d19_idx'),
        ),
    ]
